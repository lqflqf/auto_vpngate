class Ovpn:
    def __init__(self, str):

        self.host, \
            self.ip, \
            self.score, \
            self.ping, \
            self.speed, \
            self.country_long, \
            self.country_short, \
            self.session_nums, \
            self.uptime, \
            self.total_user, \
            self.total_traffic, \
            self.logtype, \
            self.operator, \
            self.message, \
            self.ovpn_file = str.split(',')

    def save_file(self):
        import base64
        binary_file = base64.standard_b64decode(self.ovpn_file)
        with open(self.host + '.ovpn', 'wb') as ofile:
            num = ofile.write(binary_file)
            ofile.close()
        return num


# ovpnstr = """vpn252423602,222.151.9.204,1400146,7,49379489,Japan,JP,22,1243147704,123878,10777563431594,2weeks,miyuki-PC's owner,,"""
#
# ovpn = Ovpn(ovpnstr)
#
# print(ovpn.save_file())